#!/bin/bash

# =================================================================
# Script de Otimização de Servidor VPS (v4)
# Autor: Adaptado por Gemini
# Descrição: Menu interativo com visual aprimorado para executar,
#            agendar ou remover a otimização automática.
# =================================================================

# --- Configuração ---
# Cores
VERDE='\033[1;32m'
AMARELO='\033[1;33m'
AZUL='\033[1;36m'
VERMELHO='\033[1;31m'
BRANCO='\033[1;37m'
NORMAL='\033[0m'

# Arquivo de log para registrar a saída detalhada dos comandos
LOG_FILE="/var/log/vps_optimizer.log"
# Identificador único para a tarefa no cron
CRON_TAG="# vps-optimizer-job"

# --- Funções de Otimização (Núcleo do Script) ---

spinner() {
    local pid=$1; local spinstr='|/-\'; while ps -p $pid > /dev/null; do local temp=${spinstr#?}; printf " [%c]  " "$spinstr"; local spinstr=$temp${spinstr%"$temp"}; sleep 0.1; printf "\b\b\b\b\b\b"; done
}

run_background() {
    local desc="$1"; local cmd="$2"; printf "  -> ${AMARELO}%-50s${NORMAL}" "$desc"; eval "$cmd" &>> "$LOG_FILE" & local pid=$!; spinner $pid; wait $pid
    if [ $? -eq 0 ]; then printf "[  ${VERDE}OK!${NORMAL}  ]\n"; else printf "[ ${VERMELHO}FALHA!${NORMAL} ]\n"; printf "      ${VERMELHO}Erro. Verifique os detalhes em: ${LOG_FILE}${NORMAL}\n"; fi
}

iniciar_otimizacao() {
    clear; > "$LOG_FILE"
    printf "${AZUL}################# INICIANDO OTIMIZAÇÃO #################\n\n${NORMAL}"
    printf "${AMARELO}Uso de memória ANTES da otimização:${NORMAL}\n"
    free -h | awk '/Mem:|Swap:/ {printf "     ${VERDE}%-5s| Total: %-7s | Em Uso: %-7s | Livre: %s${NORMAL}\n", $1, $2, $3, $4}'
    printf "\n${AZUL}--- Gerenciando Pacotes do Sistema ---\n${NORMAL}"
    run_background "Atualizando lista de pacotes" "apt update -y"
    run_background "Atualizando pacotes instalados" "apt upgrade -y"
    run_background "Removendo pacotes e configurações inúteis" "apt autoremove --purge -y"
    run_background "Limpando o cache de pacotes baixados" "apt clean -y"
    printf "\n${AZUL}--- Otimizando Memória RAM e SWAP ---\n${NORMAL}"
    sync; swapoff -a && swapon -a &>> "$LOG_FILE"; sync; echo 3 > /proc/sys/vm/drop_caches
    printf "  -> ${AMARELO}Caches de Memória e SWAP limpos.${NORMAL}           [  ${VERDE}OK!${NORMAL}  ]\n\n"
    sleep 1
    printf "${AZUL}################# OTIMIZAÇÃO CONCLUÍDA #################\n\n${NORMAL}"
    printf "${AMARELO}Uso de memória DEPOIS da otimização:${NORMAL}\n"
    free -h | awk '/Mem:|Swap:/ {printf "     ${VERDE}%-5s| Total: %-7s | Em Uso: %-7s | Livre: %s${NORMAL}\n", $1, $2, $3, $4}'
    printf "\n"
}

# --- Funções do Menu e Agendamento ---

remover_agendamento() {
    (crontab -l 2>/dev/null | grep -v "$CRON_TAG") | crontab -
}

verificar_status_agendamento() {
    if crontab -l 2>/dev/null | grep -q "$CRON_TAG"; then
        local schedule_details=$(crontab -l | grep "$CRON_TAG")
        if [[ "$schedule_details" == *"0 * * * *"* ]]; then
            echo -e "${VERDE}ATIVO (A cada hora)${NORMAL}"
        elif [[ "$schedule_details" == *"0 3 * * *"* ]]; then
            echo -e "${VERDE}ATIVO (Diariamente)${NORMAL}"
        else
            echo -e "${VERDE}ATIVO${NORMAL}"
        fi
    else
        echo -e "${VERMELHO}INATIVO${NORMAL}"
    fi
}

gerenciar_agendamento_menu() {
    while true; do
        clear
        echo -e "\E[44;1;37m             GERENCIAR AGENDAMENTO             \E[0m\n"
        echo -e "  Selecione uma opção para configurar a otimização."
        echo -e "  A tarefa será executada com o usuário root.\n"
        echo -e "  \033[1;33m1)\033[0m Agendar para rodar a cada hora"
        echo -e "  \033[1;33m2)\033[0m Agendar para rodar diariamente (03:00)"
        echo -e "  \033[1;33m3)\033[0m ${VERMELHO}Remover agendamento existente${NORMAL}"
        echo -e "  \033[1;33m0)\033[0m Voltar ao menu principal\n"
        read -p " Escolha uma opção: " choice

        local SCRIPT_PATH=$(realpath "$0"); local cron_schedule; local desc_schedule

        case $choice in
            1) cron_schedule="0 * * * *"; desc_schedule="a cada hora" ;;
            2) cron_schedule="0 3 * * *"; desc_schedule="diariamente às 03:00" ;;
            3)
                remover_agendamento
                printf "\n${VERDE}Agendamento removido com sucesso.${NORMAL}\n"; sleep 2; continue ;;
            0) return ;;
            *) printf "\n${VERMELHO}Opção inválida.${NORMAL}\n"; sleep 2; continue ;;
        esac
        
        remover_agendamento > /dev/null
        (crontab -l 2>/dev/null; echo "$cron_schedule $SCRIPT_PATH --cron $CRON_TAG") | crontab -
        printf "\n${VERDE}Otimização agendada com sucesso para rodar ${desc_schedule}.${NORMAL}\n"; sleep 2
    done
}

exibir_menu() {
    while true; do
        clear
        local agendamento_status=$(verificar_status_agendamento)
        
        echo -e "\E[44;1;37m           GERENCIADOR DE OTIMIZAÇÃO VPS           \E[0m\n"
        echo -e "   Status do Serviço:"
        echo ""
        echo -e "  ${BRANCO}Otimização Automática.: $agendamento_status${NORMAL}"
        echo ""
        echo ""
        echo -e "  \033[1;33m1)\033[0m Iniciar Otimização Agora"
        echo -e "  \033[1;33m2)\033[0m Gerenciar Agendamento Automático"
        echo -e "  \033[1;33m0)\033[0m Sair"
        echo ""
        read -p " Escolha uma opção: " main_option

        case $main_option in
            1) iniciar_otimizacao; read -p "Pressione [Enter] para voltar ao menu..." ;;
            2) gerenciar_agendamento_menu ;;
            0) printf "\nSaindo...\n"; menu ;;
            *) printf "\n${VERMELHO}Opção inválida! Tente novamente.${NORMAL}\n"; sleep 1 ;;
        esac
    done
}

# --- Lógica de Execução Principal ---

if [[ "${EUID}" -ne 0 ]]; then
    printf "${VERMELHO}Erro: Este script precisa ser executado como root.${NORMAL}\n"
    exit 1
fi

if [[ "$1" == "--cron" ]]; then
    iniciar_otimizacao
else
    exibir_menu
fi