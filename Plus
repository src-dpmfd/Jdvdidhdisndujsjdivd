#!/bin/bash

# ==============================================================================
#  INSTALADOR SSHPLUS MANAGER - vCorrected
#  - L√≥gica original preservada.
#  - Interface compacta, moderna e elegante.
#  - L√≥gica de execu√ß√£o de comandos corrigida para evitar falhas.
# ==============================================================================

# --- DEFINI√á√ïES DE ESTILO E CORES ---
C_RESET='\033[0m'
C_BOLD='\033[1m'
C_RED='\033[1;31m'
C_GREEN='\033[1;32m'
C_YELLOW='\033[1;33m'
C_BLUE='\033[1;34m'
C_CYAN='\033[1;36m'
C_WHITE='\033[1;37m'

# --- √çcones ---
ICON_OK="${C_GREEN}‚úì${C_RESET}"
ICON_FAIL="${C_RED}‚úó${C_RESET}"
ICON_WARN="${C_YELLOW}‚ö†Ô∏è${C_RESET}"
ICON_INFO="${C_BLUE}‚ÑπÔ∏è${C_RESET}"
ICON_ARROW="${C_CYAN}‚û§${C_RESET}"

# --- L√ìGICA ORIGINAL INTOCADA ---
_lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r' | sed -e 's/[^a-z.]//ig' | rev)
_Ink=$(echo '/3√óu3#s87r/l32o4√óc1a√ól1/83√ól24√ói0b√ó' | sed -e 's/[^a-z/]//ig')
_1nk=$(echo '/3√óu3#s√ó87r/83√ól2√ó4√ói0b√ó' | sed -e 's/[^a-z/]//ig')

# ==============================================================================
#  FUN√á√ïES DE INTERFACE (UI)
# ==============================================================================

print_banner() {
    local title=" $1 "
    local width=60
    local line=""
    for ((i=0; i<width; i++)); do line+="‚ïê"; done
    local padding_total=$((width - ${#title}))
    local padding_left=$((padding_total / 2))
    echo -e "${C_CYAN}${line}${C_RESET}"
    printf "%*s" $padding_left ""
    echo -e "${C_WHITE}${C_BOLD}${title}${C_RESET}"
    echo -e "${C_CYAN}${line}${C_RESET}\n"
}

print_info() {
    local icon="$1"
    local text="$2"
    echo -e " ${icon} ${C_WHITE}${text}${C_RESET}"
}

run_with_spinner() {
    local msg="$1"
    local cmd_func="$2"
    tput civis
    (
        # Executa a fun√ß√£o ou comando passado
        $cmd_func &>/dev/null
    ) &
    local pid=$!
    local spin='‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è'
    local i=0
    printf " ${C_YELLOW} %s...${C_RESET}" "$msg"
    while ps -p $pid &>/dev/null; do
        i=$(( (i+1) % ${#spin} ))
        printf "\r ${C_YELLOW}${spin:$i:1}${C_RESET} %s..." "$msg"
        sleep 0.1
    done
    wait $pid
    local status=$?
    if [ $status -eq 0 ]; then
        printf "\r ${ICON_OK} %s... ${C_GREEN}Conclu√≠do!${C_RESET} \n" "$msg"
    else
        printf "\r ${ICON_FAIL} %s... ${C_RED}Falhou!${C_RESET}      \n" "$msg"
    fi
    tput cnorm
    return $status
}

# ==============================================================================
#  FUN√á√ïES DA L√ìGICA ORIGINAL
# ==============================================================================

check_root() {
    [[ "$(whoami)" != "root" ]] && {
        clear
        print_banner "ERRO DE PERMISS√ÉO"
        print_info "${ICON_FAIL}" "${C_RED}Voc√™ precisa executar este script como usu√°rio 'root'.${C_RESET}"
        exit 1
    }
}

verif_key() {
    chmod +x $_Ink/list &>/dev/null
    [[ ! -e "$_Ink/list" ]] && { print_info "${ICON_FAIL}" "${C_RED}KEY INV√ÅLIDA! Instala√ß√£o abortada.${C_RESET}"; rm -rf $HOME/Plus &>/dev/null; exit 1; }
}

verif_key2() {
    chmod +x $_Ink/listARM &>/dev/null
    [[ ! -e "$_Ink/listARM" ]] && { print_info "${ICON_FAIL}" "${C_RED}KEY INV√ÅLIDA! Instala√ß√£o abortada.${C_RESET}"; rm -rf $HOME/Plus &>/dev/null; exit 1; }
}

# --- FUN√á√ïES DE TAREFAS COMPLEXAS (CORRE√á√ÉO APLICADA AQUI) ---
setup_menu_command() {
    echo '/bin/menu' > /bin/h && chmod +x /bin/h
}

download_core_files() {
    rm -f versao*
    wget -q https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/versao && \
    wget -q -P /bin/ https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/v2raymanager && \
    wget -q -P /bin/ https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/botteste.sh
}

setup_permissions() {
    chmod 777 /bin/v2raymanager /bin/botteste.sh
}

setup_bot() {
    mkdir -p $HOME/BOT && cd $HOME/BOT && \
    wget -q https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/ShellBot.sh && \
    chmod 777 ShellBot.sh && \
    cd $HOME
}

create_user_db() {
    awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' >$HOME/usuarios.db
}

fun_attlist() {
    apt-get update -y
    [[ ! -d /usr/share/.plus ]] && mkdir /usr/share/.plus
    echo "crz: $(date)" > /usr/share/.plus/.plus
}

inst_pct() {
    _pacotes=("bc" "screen" "nano" "unzip" "lsof" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "at")
    for _prog in ${_pacotes[@]}; do apt install -y $_prog; done
    pip install speedtest-cli
}

configure_ufw() {
    ufw allow 443/tcp && ufw allow 80/tcp && ufw allow 3128/tcp && ufw allow 8799/tcp && ufw allow 8080/tcp
}

otimize_python() {
    apt-get install -y python python2 python3.6 python3.7 python3.8 python3.9 python3-pip socat
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 4
    update-alternatives --set python3 /usr/bin/python3.6
}

# ==============================================================================
#  FUN√á√ÉO PRINCIPAL DE INSTALA√á√ÉO
# ==============================================================================

run_installation() {
    local key_verifier_func=$1
    local list_file_url=$2
    local list_file_name=$3
    local final_command_list=$4

    clear
    print_banner "INICIANDO INSTALA√á√ÉO"
    
    sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config &>/dev/null
    run_with_spinner "Ajustando porta SSH para 22" "service ssh restart"
    
    print_info "\n${ICON_INFO}" "Verificando KEY de instala√ß√£o..."
    rm $_Ink/$list_file_name &>/dev/null
    wget -q -P $_Ink $list_file_url
    $key_verifier_func
    print_info "${ICON_OK}" "${C_GREEN}KEY validada com sucesso!${C_RESET}"
    sleep 2

    # --- Chamadas para as novas fun√ß√µes ---
    run_with_spinner "Instalando comando 'menu'" "setup_menu_command"
    run_with_spinner "Baixando arquivos de configura√ß√£o" "download_core_files"
    run_with_spinner "Configurando permiss√µes" "setup_permissions"
    run_with_spinner "Configurando BOT de Telegram" "setup_bot"

    if [[ -f "$HOME/usuarios.db" ]]; then
        clear
        print_banner "BASE DE DADOS"
        print_info "${ICON_WARN}" "Uma base de dados (${C_YELLOW}usuarios.db${C_WHITE}) foi encontrada."
        print_info "${C_CYAN}[1]" "Manter a base de dados atual"
        print_info "${C_CYAN}[2]" "Criar uma nova (resetar limites)"
        read -p " ${ICON_ARROW} Escolha uma op√ß√£o [1]: " -e -i 1 optiondb
    fi
    [[ "$optiondb" = '2' || ! -f "$HOME/usuarios.db" ]] && {
        run_with_spinner "Criando nova base de dados" "create_user_db"
    }

    clear
    print_banner "INSTALANDO DEPEND√äNCIAS"
    
    run_with_spinner "Atualizando pacotes do sistema" "fun_attlist"
    run_with_spinner "Instalando pacotes essenciais" "inst_pct"
    
    [[ -f "/usr/sbin/ufw" ]] && run_with_spinner "Configurando Firewall (UFW)" "configure_ufw"
    
    run_with_spinner "Otimizando vers√µes do Python" "otimize_python"
    run_with_spinner "Finalizando e registrando" "$_Ink/$list_file_name $_lnk $_Ink $_1nk"

    clear
    print_banner "‚ú® INSTALA√á√ÉO CONCLU√çDA ‚ú®"
    print_info "${ICON_OK}" "O SSHPLUS Manager foi instalado."
    print_info "${ICON_ARROW}" "Comando principal: ${C_GREEN}menu${C_RESET}"
    print_info "${ICON_INFO}" "Telegram: ${C_CYAN}@SSHPLUS${C_RESET}"
    echo
    rm -f $HOME/Plus && cat /dev/null >~/.bash_history && history -c
}

# ==============================================================================
#  IN√çCIO DA EXECU√á√ÉO DO SCRIPT
# ==============================================================================
clear
check_root

print_banner "üöÄ SSHPLUS MANAGER INSTALLER üöÄ"
print_info "${ICON_WARN}" "${C_YELLOW}Este script ir√° instalar um conjunto de ferramentas para gerenciar seu servidor.${C_RESET}"
print_info "${ICON_INFO}" "${C_WHITE}Para uma melhor experi√™ncia, use um terminal com tema escuro.${C_RESET}"
echo
echo -e "${C_BLUE}             ‚â†√ó‚â†√ó‚â†√ó[ ${C_GREEN}EDIT:@kiritosshxd${C_BLUE} ]‚â†√ó‚â†√ó‚â†√ó${C_RESET}"
echo

ARCH=$(uname -m)
ARCH_NAME=""
case "$ARCH" in
    x86_64) ARCH_NAME="Padr√£o (Intel/AMD -> ${C_YELLOW}x86_64${C_WHITE})";;
    aarch64) ARCH_NAME="ARM (Oracle, etc -> ${C_YELLOW}aarch64${C_WHITE})";;
    *)
        print_info "${ICON_FAIL}" "Sua arquitetura (${C_RED}${ARCH}${C_WHITE}) n√£o √© suportada."
        print_info "${ICON_INFO}" "Suportado apenas: ${C_YELLOW}x86_64${C_WHITE} ou ${C_YELLOW}aarch64${C_WHITE}."
        exit 1
        ;;
esac

print_info "${ICON_OK}" "Arquitetura detectada: ${ARCH_NAME}"
read -p " ${ICON_ARROW} Deseja continuar com a instala√ß√£o? [S/n]: " -e -i "S" confirm_install
if [[ $confirm_install =~ ^[nN]$ ]]; then
    echo
    print_info "${ICON_FAIL}" "Instala√ß√£o cancelada pelo usu√°rio."
    exit 0
fi

if [[ "$ARCH" = "x86_64" ]]; then
    run_installation "verif_key" "https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/list" "list"
elif [[ "$ARCH" = "aarch64" ]]; then
    run_installation "verif_key2" "https://www.dropbox.com/s/cs5poyigwm97dyd/listARM" "listARM"
fi