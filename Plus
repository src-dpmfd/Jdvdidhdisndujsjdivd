#!/bin/bash

# ==============================================================================
#  INSTALADOR SSHPLUS MANAGER - vSmart
#  - Lógica original preservada.
#  - Interface modernizada com painéis, cores e animações.
#  - Detecção automática de arquitetura com confirmação do usuário.
# ==============================================================================

# --- DEFINIÇÕES DE ESTILO E CORES ---
C_RESET='\033[0m'
C_BOLD='\033[1m'
C_RED='\033[1;31m'
C_GREEN='\033[1;32m'
C_YELLOW='\033[1;33m'
C_BLUE='\033[1;34m'
C_CYAN='\033[1;36m'
C_WHITE='\033[1;37m'
C_BG_BLUE='\033[44m'

# --- Ícones ---
ICON_OK="${C_GREEN}✓${C_RESET}"
ICON_FAIL="${C_RED}✗${C_RESET}"
ICON_WARN="${C_YELLOW}⚠️${C_RESET}"
ICON_INFO="${C_BLUE}ℹ️${C_RESET}"
ICON_ARROW="${C_CYAN}➤${C_RESET}"

# --- BORDAS PARA PAINÉIS ---
T_BORDER_H="═"
T_BORDER_V="║"
T_CORNER_TL="╔"
T_CORNER_TR="╗"
T_CORNER_BL="╚"
T_CORNER_BR="╝"

# --- LÓGICA ORIGINAL INTOCADA ---
_lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r' | sed -e 's/[^a-z.]//ig' | rev)
_Ink=$(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×' | sed -e 's/[^a-z/]//ig')
_1nk=$(echo '/3×u3#s×87r/83×l2×4×i0b×' | sed -e 's/[^a-z/]//ig')

# ==============================================================================
#  FUNÇÕES DE INTERFACE (UI)
# ==============================================================================

# Função para imprimir um cabeçalho centralizado em um painel
print_header() {
    local title="$1"
    local width=$(tput cols)
    local padding=$(((width - ${#title} - 2) / 2))
    printf "${C_BLUE}${T_CORNER_TL}${T_BORDER_H} %s ${T_BORDER_H}" "$title"
    # Ajuste para garantir que a linha preencha a tela
    for ((i = 0; i < width - ${#title} - 4; i++)); do printf "${T_BORDER_H}"; done
    printf "${T_CORNER_TR}${C_RESET}\n"
}


# Função para imprimir uma linha de informação formatada
print_info() {
    local icon="$1"
    local text="$2"
    echo -e " ${icon} ${C_WHITE}${text}${C_RESET}"
}

# Animação de Spinner e execução de comandos
run_with_spinner() {
    local msg="$1"
    local cmd_func="$2"
    
    tput civis # Esconde o cursor
    (
        ${cmd_func} &>/dev/null
    ) &
    local pid=$!
    local spin='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
    local i=0
    
    printf " ${C_YELLOW} %s...${C_RESET}" "$msg"
    
    while ps -p $pid &>/dev/null; do
        i=$(( (i+1) % ${#spin} ))
        printf "\r ${C_YELLOW}${spin:$i:1}${C_RESET} %s..." "$msg"
        sleep 0.1
    done
    
    wait $pid
    local status=$?
    
    if [ $status -eq 0 ]; then
        printf "\r ${ICON_OK} %s... ${C_GREEN}Concluído!${C_RESET} \n" "$msg"
    else
        printf "\r ${ICON_FAIL} %s... ${C_RED}Falhou!${C_RESET}      \n" "$msg"
    fi
    
    tput cnorm # Mostra o cursor novamente
    return $status
}

# ==============================================================================
#  FUNÇÕES DA LÓGICA ORIGINAL (ADAPTADAS PARA A NOVA UI)
# ==============================================================================

check_root() {
    [[ "$(whoami)" != "root" ]] && {
        clear
        print_header "ERRO DE PERMISSÃO"
        print_info "${ICON_FAIL}" "${C_RED}Você precisa executar este script como usuário 'root'.${C_RESET}"
        echo
        exit 1
    }
}

verif_key() {
    chmod +x $_Ink/list &>/dev/null
    [[ ! -e "$_Ink/list" ]] && {
        print_info "${ICON_FAIL}" "${C_RED}KEY INVÁLIDA! Instalação abortada.${C_RESET}"
        rm -rf $HOME/Plus &>/dev/null
        exit 1
    }
}

verif_key2() {
    chmod +x $_Ink/listARM &>/dev/null
    [[ ! -e "$_Ink/listARM" ]] && {
        print_info "${ICON_FAIL}" "${C_RED}KEY INVÁLIDA! Instalação abortada.${C_RESET}"
        rm -rf $HOME/Plus &>/dev/null
        exit 1
    }
}

otimize_python() {
    apt-get install -y python python2 python3.6 python3.7 python3.8 python3.9 python3-pip socat &>/dev/null
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 &>/dev/null
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3 &>/dev/null
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2 &>/dev/null
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 4 &>/dev/null
    update-alternatives --set python3 /usr/bin/python3.6 &>/dev/null
}

fun_attlist() {
    apt-get update -y
    [[ ! -d /usr/share/.plus ]] && mkdir /usr/share/.plus
    echo "crz: $(date)" > /usr/share/.plus/.plus
}

inst_pct() {
    _pacotes=("bc" "screen" "nano" "unzip" "lsof" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "at")
    for _prog in ${_pacotes[@]}; do
        apt install -y $_prog
    done
    pip install speedtest-cli
}

# ==============================================================================
#  FUNÇÃO PRINCIPAL DE INSTALAÇÃO (EVITA REPETIÇÃO DE CÓDIGO)
# ==============================================================================

run_installation() {
    local key_verifier_func=$1
    local list_file_url=$2
    local list_file_name=$3
    local final_command_list=$4

    clear
    print_header "CONFIGURAÇÃO E VERIFICAÇÃO"
    sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config &>/dev/null
    run_with_spinner "Reiniciando serviço SSH na porta 22" "service ssh restart"
    
    print_info "${ICON_INFO}" "Verificando KEY de instalação..."
    rm $_Ink/$list_file_name &>/dev/null
    wget -q -P $_Ink $list_file_url
    $key_verifier_func
    print_info "${ICON_OK}" "${C_GREEN}KEY validada com sucesso!${C_RESET}"
    sleep 2

    run_with_spinner "Instalando comando 'menu'" "echo '/bin/menu' >/bin/h && chmod +x /bin/h"
    rm versao* &>/dev/null
    run_with_spinner "Baixando arquivos de configuração" "wget -q https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/versao && wget -q -P /bin/ https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/v2raymanager && wget -q -P /bin/ https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/botteste.sh"
    run_with_spinner "Configurando permissões" "chmod 777 /bin/v2raymanager /bin/botteste.sh"
    
    mkdir -p $HOME/BOT &>/dev/null
    cd $HOME/BOT
    run_with_spinner "Configurando BOT de Telegram" "wget -q https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/ShellBot.sh && chmod 777 ShellBot.sh"
    cd $HOME

    if [[ -f "$HOME/usuarios.db" ]]; then
        clear
        print_header "BASE DE DADOS ENCONTRADA"
        print_info "${ICON_WARN}" "Uma base de dados de usuários (${C_YELLOW}usuarios.db${C_WHITE}) foi encontrada."
        echo
        print_info "${C_CYAN}[1]" "Manter a base de dados atual"
        print_info "${C_CYAN}[2]" "Criar uma nova base de dados (resetar limites)"
        echo
        read -p " ${ICON_ARROW} Escolha uma opção [1]: " -e -i 1 optiondb
    fi
    [[ "$optiondb" = '2' || ! -f "$HOME/usuarios.db" ]] && {
        run_with_spinner "Criando nova base de dados de usuários" "awk -F : '\$3 >= 500 { print \$1 \" 1\" }' /etc/passwd | grep -v '^nobody' >$HOME/usuarios.db"
    }

    clear
    print_header "INICIANDO INSTALAÇÃO"
    print_info "${ICON_INFO}" "Este processo pode levar alguns minutos."
    echo
    
    run_with_spinner "Atualizando lista de pacotes do sistema" "fun_attlist"
    run_with_spinner "Instalando pacotes essenciais" "inst_pct"
    
    if [[ -f "/usr/sbin/ufw" ]]; then
       run_with_spinner "Configurando regras de Firewall (UFW)" "ufw allow 443/tcp &>/dev/null; ufw allow 80/tcp &>/dev/null; ufw allow 3128/tcp &>/dev/null; ufw allow 8799/tcp &>/dev/null; ufw allow 8080/tcp &>/dev/null"
    fi
    
    run_with_spinner "Otimizando versões do Python" "otimize_python"
    run_with_spinner "Finalizando e registrando instalação" "$final_command_list"

    clear
    print_header "INSTALAÇÃO CONCLUÍDA COM SUCESSO"
    echo
    print_info "${ICON_OK}" "O SSHPLUS Manager foi instalado."
    print_info "${ICON_ARROW}" "Comando principal: ${C_GREEN}menu${C_RESET}"
    print_info "${ICON_INFO}" "Para mais informações, junte-se ao nosso Telegram: ${C_CYAN}@SSHPLUS${C_RESET}"
    echo
    rm -f $HOME/Plus && cat /dev/null >~/.bash_history && history -c
}

# ==============================================================================
#  INÍCIO DA EXECUÇÃO DO SCRIPT
# ==============================================================================
clear
check_root

# --- TELA DE BOAS-VINDAS ---
echo -e "${C_BG_BLUE}${C_WHITE}${C_BOLD}"
printf ' %0.s' $(seq 1 $(tput cols))
printf "\n"
printf " %-$(($(tput cols)-2))s \n" " BEM-VINDO AO INSTALADOR SSHPLUS MANAGER"
printf " %0.s" $(seq 1 $(tput cols))
echo -e "${C_RESET}\n"

print_info "${ICON_WARN}" "${C_YELLOW}Este script irá instalar um conjunto de ferramentas para gerenciar seu servidor.${C_RESET}"
print_info "${ICON_INFO}" "${C_WHITE}Para uma melhor experiência, use um terminal com tema escuro.${C_RESET}"
echo
echo -e "${C_BLUE}≠×≠×≠×≠×≠×≠×≠×[ ${C_GREEN}EDIT:@kiritosshxd${C_BLUE} ]≠×≠×≠×≠×≠×≠×≠×${C_RESET}"
echo

# --- VERIFICAÇÃO DE ARQUITETURA E CONFIRMAÇÃO ---
print_header "VERIFICAÇÃO DE ARQUITETURA"

ARCH=$(uname -m)
ARCH_NAME=""

case "$ARCH" in
    x86_64)
        ARCH_NAME="Padrão (Intel/AMD -> ${C_YELLOW}x86_64${C_WHITE})"
        ;;
    aarch64)
        ARCH_NAME="ARM (Oracle, etc -> ${C_YELLOW}aarch64${C_WHITE})"
        ;;
    *)
        print_info "${ICON_FAIL}" "Sua arquitetura (${C_RED}${ARCH}${C_WHITE}) não é suportada por este script."
        print_info "${ICON_INFO}" "A instalação só pode prosseguir em sistemas ${C_YELLOW}x86_64${C_WHITE} ou ${C_YELLOW}aarch64${C_WHITE}."
        echo
        exit 1
        ;;
esac

print_info "${ICON_OK}" "Arquitetura detectada: ${ARCH_NAME}"
echo
read -p " ${ICON_ARROW} Deseja continuar com a instalação para esta arquitetura? [S/n]: " -e -i "S" confirm_install

if [[ $confirm_install =~ ^[nN]$ ]]; then
    echo
    print_info "${ICON_FAIL}" "Instalação cancelada pelo usuário."
    exit 0
fi

# Com base na arquitetura detectada, chama a função de instalação correta
if [[ "$ARCH" = "x86_64" ]]; then
    run_installation "verif_key" \
                     "https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/list" \
                     "list" \
                     "$_Ink/list $_lnk $_Ink $_1nk"
elif [[ "$ARCH" = "aarch64" ]]; then
    run_installation "verif_key2" \
                     "https://www.dropbox.com/s/cs5poyigwm97dyd/listARM" \
                     "listARM" \
                     "$_Ink/listARM $_lnk $_Ink $_1nk"
fi