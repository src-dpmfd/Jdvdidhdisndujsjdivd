#!/bin/bash

fun_bar () {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        [[ ! -e /usr/lib/sshplus ]] && rm -rf /bin/menu > /dev/null 2>&1
        ${comando[0]} -y > /dev/null 2>&1
        ${comando[1]} -y > /dev/null 2>&1
        touch $HOME/fim
    ) > /dev/null 2>&1 &
    tput civis
    echo -ne "\033[1;33m["
    while true; do
       for((i=0; i<18; i++)); do
           echo -ne "\033[1;31m#"
           sleep 0.1s
       done
       [[ -e $HOME/fim ]] && rm $HOME/fim && break
       echo -e "\033[1;33m]"
       sleep 1s
       tput cuu1
       tput dl1
       echo -ne "\033[1;33m["
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}

IP=$(cat /etc/IP)
x="ok"

velocity () {
    aguarde () {
        comando[0]="$1"
        comando[1]="$2"
        (
            [[ -e $HOME/fim ]] && rm $HOME/fim
            [[ ! -d /etc/SSHPlus ]] && rm -rf /bin/menu
            ${comando[0]} > /dev/null 2>&1
            ${comando[1]} > /dev/null 2>&1
            touch $HOME/fim
        ) > /dev/null 2>&1 &
        tput civis
        echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
        while true; do
           for((i=0; i<18; i++)); do
               echo -ne "\033[1;31m#"
               sleep 0.1s
           done
           [[ -e $HOME/fim ]] && rm $HOME/fim && break
           echo -e "\033[1;33m]"
           sleep 1s
           tput cuu1
           tput dl1
           echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
        done
        echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
        tput cnorm
    }
    fun_tst () {
        speedtest --share > speed
    }
    echo ""
    echo -e "   \033[1;32mTESTANDO A VELOCIDADE DO SERVIDOR !\033[0m"
    echo ""
    aguarde 'fun_tst'
    echo ""
    png=$(cat speed | sed -n '5 p' |awk -F : {'print $NF'})
    down=$(cat speed | sed -n '7 p' |awk -F :  {'print $NF'})
    upl=$(cat speed | sed -n '9 p' |awk -F :  {'print $NF'})
    lnk=$(cat speed | sed -n '10 p' |awk {'print $NF'})
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;32mPING (LATENCIA):\033[1;37m$png"
    echo -e "\033[1;32mDOWNLOAD:\033[1;37m$down"
    echo -e "\033[1;32mUPLOAD:\033[1;37m$upl"
    echo -e "\033[1;32mLINK: \033[1;36m$lnk\033[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    rm -rf $HOME/speed
}

#limiter
limit1 () {
   clear
   echo -e "\n\033[1;32mINICIANDO O LIMITER... \033[0m"
   echo ""
   fun_bar 'screen -dmS limiter limiter' 'sleep 3'
   [[ $(grep -wc "limiter" /etc/autostart) = '0' ]] && {
       echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
   } || {
       sed -i '/limiter/d' /etc/autostart
	   echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
   }
   echo -e "\n\033[1;32m  LIMITER ATIVO !\033[0m"
   sleep 3
   menu
}

limit2 () {
   clear
   echo -e "\033[1;32mPARANDO O LIMITER... \033[0m"
   echo ""
   fun_stplimiter () {
      sleep 1
      screen -r -S "limiter" -X quit
      screen -wipe 1>/dev/null 2>/dev/null
      [[ $(grep -wc "limiter" /etc/autostart) != '0' ]] && {
          sed -i '/limiter/d' /etc/autostart
      }
      sleep 1
   }
   fun_bar 'fun_stplimiter' 'sleep 3'
   echo -e "\n\033[1;31m LIMITER PARADO !\033[0m"
   sleep 3
   menu
}

limit_ssh () {
    [[ $(ps x | grep "limiter"|grep -v grep |wc -l) = '0' ]] && limit1 || limit2
}

autoexec () {
   if grep "menu;" /etc/profile > /dev/null; then
      clear
      echo -e "\033[1;32mDESATIVANDO AUTO EXECUÇÃO\033[0m"
      offautmenu () {
         sed -i '/menu;/d' /etc/profile
      }
      echo ""
      fun_bar 'offautmenu'
      echo ""
      echo -e "\033[1;31mAUTO EXECUÇÃO DESATIVADO!\033[0m"
      sleep 1.5s
      menu2
   else
      clear
      echo -e "\033[1;32mATIVANDO AUTO EXECUÇÃO\033[0m"
      autmenu () {
         grep -v "^menu;" /etc/profile > /tmp/tmpass && mv /tmp/tmpass /etc/profile
         echo "menu;" >> /etc/profile
      }
      echo ""
      fun_bar 'autmenu'
      echo ""
      echo -e "\033[1;32mAUTO EXECUÇÃO ATIVADO!\033[0m"
      sleep 1.5s
      menu2
   fi
}

collect_system_data() {
    _ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
    [[ "$(cat /etc/SSHPlus/Exp)" != "" ]] && _expuser=$(cat /etc/SSHPlus/Exp) || _expuser="0"
    [[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
    [[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) && _ondrp=$(($_drp - 1)) || _ondrp="0"
    _onli=$(($_ons + $_onop + $_ondrp))
    _ram=$(printf ' %-1s' "$(free -h | grep -i mem | awk {'print $2'})")
    _usor=$(printf '%-1s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
    _usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
    _core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
    _system=$(printf '%-1s' "$system")
    _hora=$(printf '%(%H:%M:%S)T')
    _onlin=$(printf '%-1s' "$_onli")
    _userexp=$(printf '%-1s' "$_expuser")
    _tuser=$(printf '%-1s' "$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)")
    swap1=$(printf '%-1s' "$(free -h | grep -i swap | awk {'print $2'})")
    swap2=$(printf '%-1s' "$(free -h | grep -i swap | awk {'print $4'})")
    swap3=$(printf '%-1s' "$(free -h | grep -i swap | awk {'print $3'})")

    if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
        system=$(cut -d' ' -f1 /etc/issue.net)
        system+=$(echo ' ')
        system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}')
    elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
        system=$(cut -d' ' -f1 /etc/issue.net)
        system+=$(echo ' ')
        system+=$(cut -d' ' -f3 /etc/issue.net)
    else
        system=$(cut -d' ' -f1 /etc/issue.net)
    fi
}

print_menu_static() {
    tput clear
    collect_system_data
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[41;1;37m    ⇱         SSHPLUS  by: @alfalemos        ⇲    \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;32mSISTEMA            MEMÓRIA RAM      PROCESSADOR "
    echo -e "\033[1;31mOS: \033[1;37m$_system      \033[1;31mTotal:\033[1;37m$_ram      \033[1;31mNucleos: \033[1;37m$_core\033[0m"
    echo -e "\033[1;31mHora: \033[1;37m$_hora     \033[1;31mEm uso: \033[1;37m$_usor    \033[1;31mEm uso: \033[1;37m$_usop\033[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    if [[ ! -e /tmp/att ]]; then
        echo -e "\033[1;32mOnlines:\033[1;37m $_onlin         \033[1;31mExpirados: \033[1;37m$_userexp     \033[1;33mTotal: \033[1;37m$_tuser\033[0m"
    else
        echo -e "  \033[1;33m[\033[1;31m!\033[1;33m]  \033[1;32mEXISTE UMA ATUALIZACAO DISPONIVEL  \033[1;33m[\033[1;31m!\033[1;33m]\033[0m"
    fi
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    stsl=$(ps x | grep "limiter"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
    stsu=$(ps x | grep "udpvpn"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
    echo -e "\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mCRIAR USUARIO \033[1;31m            [\033[1;36m11\033[1;31m] \033[1;37m• \033[1;33mSPEEDTEST \033[1;31m
[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;33mCRIAR USUARIO TESTE \033[1;31m      [\033[1;36m12\033[1;31m] \033[1;37m• \033[1;33mBANNER \033[1;31m
[\033[1;36m03\033[1;31m] \033[1;37m\033[1;37m• \033[1;33mREMOVER USUARIO \033[1;31m          [\033[1;36m13\033[1;31m] \033[1;37m• \033[1;33mTRAFEGO \033[1;31m
[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mMONITOR ONLINE \033[1;31m           [\033[1;36m14\033[1;31m] \033[1;37m• \033[1;33mOTIMIZAR \033[1;31m
[\033[1;36m05\033[1;31m] \033[1;37m• \033[1;33mMUDAR DATA \033[1;31m               [\033[1;36m15\033[1;31m] \033[1;37m• \033[1;33mBACKUP \033[1;31m
[\033[1;36m06\033[1;31m] \033[1;37m• \033[1;33mALTERAR LIMITE \033[1;31m           [\033[1;36m16\033[1;31m] \033[1;37m• \033[1;33mLIMITER $stsl\033[1;31m
[\033[1;36m07\033[1;31m] \033[1;37m• \033[1;33mMUDAR SENHA \033[1;31m              [\033[1;36m17\033[1;31m] \033[1;37m• \033[1;33mINFO VPS\033[1;31m
[\033[1;36m08\033[1;31m] \033[1;37m• \033[1;33mREMOVER EXPIRADOS \033[1;31m        [\033[1;36m18\033[1;31m] \033[1;37m• \033[1;33mMENU 2 \033[1;31m>\033[1;33m>\033[1;32m>\033[0m\033[1;31m
[\033[1;36m09\033[1;31m] \033[1;37m• \033[1;33mRELATORIO DE USUARIOS \033[1;31m    [\033[1;36m19\033[1;31m] \033[1;37m• \033[1;33mSAIR \033[1;32m<\033[1;33m<\033[1;31m<\033[0m\033[1;31m
[\033[1;36m10\033[1;31m] \033[1;37m• \033[1;33mMODO DE CONEXAO \033[1;31m          
\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
}

print_menu2_static() {
    tput clear
    collect_system_data
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[41;1;37m    ⇱         SSHPLUS  by: @alfalemos        ⇲    \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;32mSISTEMA            MEMÓRIA RAM      PROCESSADOR "
    echo -e "\033[1;31mOS: \033[1;37m$_system      \033[1;31mTotal:\033[1;37m$_ram      \033[1;31mNucleos: \033[1;37m$_core\033[0m"
    echo -e "\033[1;31mHora: \033[1;37m$_hora     \033[1;31mEm uso: \033[1;37m$_usor    \033[1;31mEm uso: \033[1;37m$_usop\033[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    if [[ ! -e /tmp/att ]]; then
        echo -e "\033[1;32mOnlines:\033[1;37m $_onlin         \033[1;31mExpirados: \033[1;37m$_userexp     \033[1;33mTotal: \033[1;37m$_tuser\033[0m"
    else
        echo -e "  \033[1;33m[\033[1;31m!\033[1;33m]  \033[1;32mEXISTE UMA ATUALIZACAO DISPONIVEL  \033[1;33m[\033[1;31m!\033[1;33m]\033[0m"
    fi
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    [[ -e /etc/Plus-torrent ]] && stsf=$(echo -e "\033[1;32m◉ ") || stsf=$(echo -e "\033[1;31m○ ")
    stsbot=$(ps x | grep "bot_plus"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
    autm=$(grep "menu;" /etc/profile > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
    echo -e "\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mADICIONAR HOST \033[1;31m       [\033[1;36m08\033[1;31m] \033[1;37m• \033[1;33mMUDAR SENHA ROOT \033[1;31m  \033[1;31m
\033[1;31m[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;33mREMOVER HOST \033[1;31m         [\033[1;36m09\033[1;31m] \033[1;37m• \033[1;33mAUTO EXECUCAO $autm \033[1;31m
\033[1;31m[\033[1;36m03\033[1;31m] \033[1;37m• \033[1;33mREINICIAR SISTEMA \033[1;31m    [\033[1;36m10\033[1;31m] $var01 \033[1;33mATUALIZAR SCRIPT \033[1;31m  \033[1;31m
\033[1;31m[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mREINICIAR SERVICOS \033[1;31m   [\033[1;36m11\033[1;31m] \033[1;37m• \033[1;33mREMOVER SCRIPT \033[1;31m  \033[1;31m  
\033[1;31m[\033[1;36m05\033[1;31m] \033[1;37m• \033[1;33mBLOCK TORRENT $stsf\033[1;31m      [\033[1;36m12\033[1;31m] \033[1;37m• \033[1;33mMENU \033[1;32m<\033[1;33m<\033[1;31m< \033[1;31m  \033[1;31m      
\033[1;31m[\033[1;36m06\033[1;31m] \033[1;37m• \033[1;33mBOT TELEGRAM $stsbot\033[1;31m       [\033[1;36m13\033[1;31m] \033[1;37m• \033[1;33mSAIR \033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m\033[1;31m
\033[1;31m[\033[1;36m07\033[1;31m] \033[1;37m• \033[1;33mBOT TESTE $stsbotteste\033[1;31m            "
    echo ""
    echo ""
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
}

update_header() {
    while true; do
        collect_system_data
        tput sc
        tput cup 4 0
        echo -e "\033[1;31mOS: \033[1;37m$_system      \033[1;31mTotal:\033[1;37m$_ram      \033[1;31mNucleos: \033[1;37m$_core\033[0m"
        echo -e "\033[1;31mHora: \033[1;37m$_hora     \033[1;31mEm uso: \033[1;37m$_usor    \033[1;31mEm uso: \033[1;37m$_usop\033[0m"
        tput rc
        sleep 1
    done
}

menu() {
    print_menu_static
    update_header &
    local bg_pid=$!

    while true; do
        tput cup 20 0
        tput el
        echo -ne "\033[1;32mOQUE DESEJA FAZER \033[1;33m?\033[1;31m?\033[1;37m : "
        read x

        kill $bg_pid
        wait $bg_pid 2>/dev/null

        case "$x" in
            1 | 01)
            clear
            criarusuario
            echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
            menu
            ;;
            2 | 02)
            clear
            criarteste
            echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
            menu
            ;;
            3 | 03)
            clear
            remover
            sleep 3
            menu
            ;;
            4 | 04)
            clear
            sshmonitor
            echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
            menu
            ;;
            5 | 05)
            clear
            mudardata
            sleep 3
            menu
            ;;
            6 | 06)
            clear
            alterarlimite
            sleep 3
            menu
            ;;
            7 | 07)
            clear
            alterarsenha
            sleep 3
            menu
            ;;
            8 | 08)
            clear
            expcleaner
            echo ""
            sleep 3
            menu
            ;;
            9 | 09)
            clear
            infousers
            echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
            menu
            ;;
            10)
            clear
            conexao
            exit;
            ;;
            11)
            clear
            # Corrigido de 'speestest' para 'velocity' que é a função declarada
            velocity
            echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
            menu
            ;;
            12)
            clear
            banner
            sleep 3
            menu
            ;;
            13)
            clear
            echo -e "\033[1;32mPARA SAIR CLICK CTRL + C\033[1;36m"
            sleep 4
            nload
            menu
            ;;
            14)
            clear
            otimizar
            echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
            menu
            ;;
            15)
            clear
            userbackup
            echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
            menu
            ;;
            16)
            clear
            limit_ssh
            menu
            ;;
            17)
            clear
            detalhes
            echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
            menu
            ;;
            18)
            clear
            menu2
            ;;
            19)
            clear
            echo -e "\033[1;31mSaindo...\033[0m"
            sleep 1
            clear
            exit;
            ;;
            *)
            echo -e "\n\033[1;31mOpcao invalida !\033[0m"
            sleep 1
            clear
            menu
        esac
    done
}

menu2() {
    print_menu2_static
    update_header &
    local bg_pid=$!

    while true; do
        tput cup 20 0
        tput el
        echo -ne "\033[1;32mOQUE DESEJA FAZER \033[1;33m?\033[1;31m?\033[1;37m : "
        read x

        kill $bg_pid
        wait $bg_pid 2>/dev/null

        case "$x" in
            1 | 01)
            clear
            addhost
            echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
            menu2
            ;;
            2 | 02)
            clear
            delhost
            echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
            menu2
            ;;
            3)
            clear
            reiniciarsistema
            ;;
            4)
            clear
            reiniciarservicos
            sleep 3
            menu2
            ;;
            5)
            clear
            blockt
            menu2
            ;;
            6)
            clear
            botssh
            menu2
            ;;
            7)
            clear
            inst-botteste
            menu2
            ;;
            8)
            clear
            senharoot
            sleep 3
            menu2
            ;;
            9)
            clear
            autoexec
            ;;
            10)
            clear
            attscript
            ;;
            11)
            clear
            delscript
            ;;
            12)
            clear
            menu
            ;;
            13)
            echo -e "\033[1;31mSaindo...\033[0m"
            sleep 1
            clear
            exit;
            ;;
            *)
            echo -e "\n\033[1;31mOpcao invalida !\033[0m"
            sleep 1
            clear
            menu2
        esac
    done
}

# Inicia o script chamando a função principal do menu
menu