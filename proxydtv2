#!/bin/bash

#================================================================================#
# SCRIPT DE GERENCIAMENTO DO DTPROXY - VERSÃO MODERNA COM SYSTEMD
# Author: Seu Nome/Apelido
#================================================================================#

# --- Variáveis Globais ---
BINARY_URL="https://raw.githubusercontent.com/src-dpmfd/Jdvdidhdisndujsjdivd/main/proxydt.2"
BINARY_PATH="/usr/local/bin/proxydt.2"
SERVICE_NAME="dtproxy"
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
CONFIG_DIR="/etc/dtproxy"
CONFIG_FILE="${CONFIG_DIR}/config"

# --- Funções Auxiliares ---

# Garante que o script está sendo executado como root
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "\n\033[1;31mEste script precisa ser executado como root. Use: sudo bash $0\033[0m\n"
        exit 1
    fi
}

# Pausa para o usuário ler a mensagem
pause() {
    read -p $'\n\033[1;36mPressione [Enter] para continuar...\033[0m'
}

# --- Funções de Instalação ---

# Instala as dependências necessárias
install_dependencies() {
    echo -e "\033[1;33m[*] Atualizando a lista de pacotes...\033[0m"
    apt-get update >/dev/null 2>&1
    echo -e "\033[1;33m[*] Instalando dependências (wget, libssl1.1)...\033[0m"
    apt-get install -y wget >/dev/null 2>&1

    # Tratamento para libssl1.1, que foi removida de repositórios recentes
    if ! dpkg -l | grep -q "libssl1.1"; then
        ARCH=$(dpkg --print-architecture)
        LIBSSL_URL="http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.24_${ARCH}.deb"
        
        echo -e "\033[1;33m[*] Baixando libssl1.1 para arquitetura ${ARCH}...\033[0m"
        wget -q -O /tmp/libssl1.1.deb "${LIBSSL_URL}"
        
        if [ $? -eq 0 ]; then
            dpkg -i /tmp/libssl1.1.deb >/dev/null 2>&1
            rm /tmp/libssl1.1.deb
            if ! dpkg -l | grep -q "libssl1.1"; then
                 echo -e "\n\033[1;31mFalha ao instalar a dependência 'libssl1.1'. A instalação não pode continuar.\033[0m"
                 exit 1
            fi
        else
            echo -e "\n\033[1;31mNão foi possível baixar 'libssl1.1' para a sua arquitetura. O link pode estar quebrado.\033[0m"
            echo -e "\033[1;31mInstalação abortada.\033[0m"
            exit 1
        fi
    fi
    echo -e "\033[1;32m[✓] Dependências instaladas com sucesso.\033[0m"
}

# Baixa e instala o binário do DTProxy
install_binary() {
    echo -e "\033[1;33m[*] Baixando o binário do DTProxy...\033[0m"
    wget -q -O "${BINARY_PATH}" "${BINARY_URL}"
    if [ $? -ne 0 ]; then
        echo -e "\n\033[1;31mFalha ao baixar o binário do DTProxy. Verifique a URL e sua conexão.\033[0m"
        exit 1
    fi
    chmod +x "${BINARY_PATH}"
    echo -e "\033[1;32m[✓] Binário instalado em ${BINARY_PATH}\033[0m"
}

# Cria o arquivo de serviço systemd
create_service_file() {
    echo -e "\033[1;33m[*] Criando o serviço systemd...\033[0m"
    cat > "${SERVICE_FILE}" <<EOF
[Unit]
Description=DTProxy Service
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/root
ExecStart=${BINARY_PATH} --port \${DT_PORT} \${EXTRA_ARGS} --response \${RESPONSE_MSG}
Restart=always
RestartSec=3
EnvironmentFile=${CONFIG_FILE}

[Install]
WantedBy=multi-user.target
EOF
    echo -e "\033[1;32m[✓] Serviço criado em ${SERVICE_FILE}\033[0m"
}

# Função principal de instalação
install_dtproxy() {
    clear
    echo -e "\033[1;34m--- Iniciando Instalação do DTProxy ---\033[0m"
    
    # 1. Instalar dependências
    install_dependencies
    
    # 2. Instalar binário
    install_binary
    
    # 3. Criar diretório de configuração e arquivo padrão
    mkdir -p "${CONFIG_DIR}"
    if [ ! -f "${CONFIG_FILE}" ]; then
        echo "DT_PORT=80" > "${CONFIG_FILE}"
        echo "EXTRA_ARGS=--http" >> "${CONFIG_FILE}"
        echo "RESPONSE_MSG=proxydt-v1-@alfalemos" >> "${CONFIG_FILE}"
    fi
    
    # 4. Criar e habilitar o serviço
    create_service_file
    systemctl daemon-reload
    systemctl enable "${SERVICE_NAME}" >/dev/null 2>&1
    
    echo -e "\n\033[1;32mInstalação concluída com sucesso!\033[0m"
    echo -e "\033[1;36mUse a opção 'Configurar e Iniciar' para definir suas preferências.\033[0m"
}

# --- Funções de Gerenciamento ---

# Configura e reinicia o serviço
configure_and_start() {
    clear
    echo -e "\E[44;1;37m        CONFIGURAR DTPROXY        \E[0m\n"
    
    # Carrega configurações atuais para exibir como padrão
    [ -f "${CONFIG_FILE}" ] && source "${CONFIG_FILE}"

    read -p " Digite a porta para o PROXYDT (padrão: ${DT_PORT:-80}): " NEW_PORT
    read -p " Digite a mensagem de resposta (padrão: ${RESPONSE_MSG:-proxydt-v1-@alfalemos}): " NEW_MSG
    
    echo ""
    echo -e " Escolha o modo de operação:"
    echo -e " \033[1;33m1)\033[0m Proxy HTTP"
    echo -e " \033[1;33m2)\033[0m Proxy HTTP + OpenVPN"
    read -p " Opção [1-2] (padrão: 1): " -e -i 1 MODE_CHOICE
    
    # Define os valores
    DT_PORT=${NEW_PORT:-${DT_PORT:-80}}
    RESPONSE_MSG=${NEW_MSG:-${RESPONSE_MSG:-proxydt-v1-@alfalemos}}
    EXTRA_ARGS="--http"
    [ "$MODE_CHOICE" = "2" ] && EXTRA_ARGS="$EXTRA_ARGS --openvpn-port"

    # Salva as configurações no arquivo
    echo "DT_PORT=${DT_PORT}" > "${CONFIG_FILE}"
    echo "EXTRA_ARGS=\"${EXTRA_ARGS}\"" >> "${CONFIG_FILE}"
    echo "RESPONSE_MSG=\"${RESPONSE_MSG}\"" >> "${CONFIG_FILE}"
    
    # Reinicia o serviço para aplicar as novas configurações
    echo -e "\n\033[1;33m[*] Aplicando configurações e reiniciando o serviço...\033[0m"
    systemctl restart "${SERVICE_NAME}"
    
    sleep 2
    if systemctl is-active --quiet "${SERVICE_NAME}"; then
        echo -e "\033[1;32m[✓] Serviço DTProxy iniciado com sucesso!\033[0m"
    else
        echo -e "\033[1;31m[✗] Erro ao iniciar o serviço DTProxy. Verifique o status com a opção 5.\033[0m"
    fi
}

# Para o serviço
stop_service() {
    clear
    echo -e "\033[1;33m[*] Parando o serviço DTProxy...\033[0m"
    systemctl stop "${SERVICE_NAME}"
    if ! systemctl is-active --quiet "${SERVICE_NAME}"; then
        echo -e "\033[1;32m[✓] Serviço parado com sucesso!\033[0m"
    else
        echo -e "\033[1;31m[✗] Ocorreu um erro ao parar o serviço.\033[0m"
    fi
}

# Desinstala completamente
uninstall_dtproxy() {
    clear
    echo -e "\E[41;1;37m        DESINSTALAR DTPROXY        \E[0m\n"
    read -p " Você tem CERTEZA que deseja remover TUDO? (serviço, binário, configs) [s/N]: " CONFIRM
    
    if [[ "$CONFIRM" =~ ^[sS]$ ]]; then
        echo -e "\n\033[1;33m[*] Parando e desabilitando o serviço...\033[0m"
        systemctl stop "${SERVICE_NAME}" >/dev/null 2>&1
        systemctl disable "${SERVICE_NAME}" >/dev/null 2>&1
        
        echo -e "\033[1;33m[*] Removendo arquivos...\033[0m"
        rm -f "${BINARY_PATH}"
        rm -f "${SERVICE_FILE}"
        rm -rf "${CONFIG_DIR}"
        
        echo -e "\033[1;33m[*] Recarregando o systemd...\033[0m"
        systemctl daemon-reload
        
        echo -e "\n\033[1;32mDTProxy desinstalado com sucesso!\033[0m"
        echo -e "\033[1;36mObs: A dependência 'libssl1.1' não foi removida.\033[0m"
    else
        echo -e "\n\033[1;31mDesinstalação cancelada.\033[0m"
    fi
}

# Mostra o status detalhado do serviço
show_status() {
    clear
    echo -e "\033[1;34m--- Status do Serviço DTProxy ---\033[0m"
    systemctl status "${SERVICE_NAME}" --no-pager -l
}

# --- Menu Principal ---
main_menu() {
    check_root
    while true; do
        clear
        echo -e "\E[44;1;37m        DTPROXY V2   By: @alfalemos        \E[0m"
        echo ""

        if [ -f "${SERVICE_FILE}" ]; then
             # Verifica o status do serviço
            if systemctl is-active --quiet "${SERVICE_NAME}"; then
                STATUS="ATIVO"
            else
                STATUS="INATIVO"
            fi
            
            # Carrega e exibe as configurações
            source "${CONFIG_FILE}"
            MODE="HTTP"
            [[ "${EXTRA_ARGS}" == *"--openvpn-port"* ]] && MODE="HTTP + OPENVPN"
            
            printf " Status: %-18s   Porta: %-9s   Modo: %s" "$STATUS" "$DT_PORT" "$MODE"
        else
            printf " Status: %s" "NÃO INSTALADO"
        fi

        echo ""
        echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m- \033[1;32mINICIAR / CONFIGURAR\033[0m"
        echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m- \033[1;31mPARAR\033[0m"
        echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;37m- \033[1;33mINSTALAR / ATUALIZAR\033[0m"
        echo -e "\033[1;31m[\033[1;36m4\033[1;31m] \033[1;37m- \033[1;31mDESINSTALAR\033[0m"
        echo -e "\033[1;31m[\033[1;36m5\033[1;31m] \033[1;37m- \033[1;36mVER STATUS DETALHADO\033[0m"
        echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m- \033[1;33mSAIR\033[0m"
        echo ""
        read -p " --> Selecione uma opção: " option

        case $option in
            1)
                if [ ! -f "${BINARY_PATH}" ]; then
                    echo -e "\n\033[1;31mDTProxy não instalado. Use a opção 3 primeiro.\033[0m"; sleep 2
                else
                    configure_and_start; pause
                fi
                ;;
            2) stop_service; pause ;;
            3) install_dtproxy; pause ;;
            4) uninstall_dtproxy; pause ;;
            5) show_status; pause ;;
            0) clear; exit 0 ;;
            *) echo -e "\n\033[1;31mOpção inválida!\033[0m"; sleep 1 ;;
        esac
    done
}

#-- Início do Script --#
main_menu