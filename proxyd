#!/usr/bin/env bash
# DragonX Manager - systemd + menu completo
# Suporte a m√∫ltiplas portas
# L√≥gica original por Danilo (refatorado para DragonX), Estilo por Gemini

# --- VARI√ÅVEIS DE CONFIGURA√á√ÉO ---
INSTALL_DIR="$HOME/DragonX"
REPO_URL="https://git.dr2.site/penguinehis/DragonX-SSH-Proxy"
SERVICE_PREFIX="dragonx_port"
LOG_DIR="$INSTALL_DIR/logs"
PORTS_FILE="$INSTALL_DIR/ports.list"

# --- FUN√á√ïES DE INSTALA√á√ÉO E VERIFICA√á√ÉO ---

# Fun√ß√£o para instalar ou atualizar o DragonX
instalar_ou_atualizar_dragonx() {
    clear
    echo -e "\E[44;1;37m        INSTALADOR E ATUALIZADOR DRAGONX        \E[0m"
    echo ""
    echo "Instalando DragonX em $INSTALL_DIR..."

    # Atualiza apt e instala depend√™ncias (somente para sistemas baseados em Debian/Ubuntu)
    if command -v apt >/dev/null 2>&1; then
      echo "Atualizando pacotes e instalando depend√™ncias..."
      sudo apt update > /dev/null 2>&1
      sudo apt install -y git unzip wget screen > /dev/null 2>&1
    fi

    # Busca o c√≥digo do reposit√≥rio
    if [ -d "$INSTALL_DIR/.git" ]; then
      echo "Reposit√≥rio existente detectado. Puxando as √∫ltimas atualiza√ß√µes..."
      git -C "$INSTALL_DIR" pull --rebase --autostash || true
    else
      rm -rf "$INSTALL_DIR"
      git clone --depth 1 "$REPO_URL" "$INSTALL_DIR"
    fi

    # Garante que os bin√°rios sejam execut√°veis
    chmod +x "$INSTALL_DIR/proxy.sh" 2>/dev/null || true
    chmod +x "$INSTALL_DIR/dragon_go-ARM" 2>/dev/null || true
    chmod +x "$INSTALL_DIR/dragon_go-x86" 2>/dev/null || true

    # Cria o comando global para o gerenciador
    sudo ln -sf "$INSTALL_DIR/proxy.sh" /usr/local/bin/dragonx

    echo -e "\n\033[1;32m‚úÖ Instala√ß√£o/Atualiza√ß√£o finalizada!\033[0m"
    sleep 2 
    clear 
    proxyd
}

# Fun√ß√£o para verificar se os arquivos essenciais est√£o presentes
verificar_instalacao() {
    if [ ! -f "$INSTALL_DIR/proxy.sh" ] || \
       [ ! -f "$INSTALL_DIR/dragon_go-x86" ] || \
       [ ! -f "$INSTALL_DIR/dragon_go-ARM" ]; then
        return 1 # Retorna 1 (falso) se algum arquivo estiver faltando
    else
        return 0 # Retorna 0 (verdadeiro) se tudo estiver ok
    fi
}

# --- FUN√á√ïES DE GERENCIAMENTO DE SERVI√áO ---

# Garante que os diret√≥rios necess√°rios existam
garantir_diretorios() {
    mkdir -p "$LOG_DIR"
    mkdir -p "$INSTALL_DIR"
}

# Fun√ß√£o para criar/atualizar um servi√ßo systemd para uma porta espec√≠fica
atualizar_servico() {
    local PORTA=$1
    local NOME_SERVICO="${SERVICE_PREFIX}_${PORTA}.service"
    
    # Detecta a arquitetura automaticamente para o servi√ßo
    ARCH=$(uname -m)
    case "$ARCH" in
      x86_64|i386|i686)
        BIN_NAME="dragon_go-x86"
        ;;
      aarch64|armv7l|armv6l|arm*)
        BIN_NAME="dragon_go-ARM"
        ;;
      *)
        echo -e "\033[1;31mArquitetura n√£o suportada: $ARCH\033[0m"
        sleep 3
        return 1
        ;;
    esac

    # Cria o arquivo de servi√ßo do systemd com pol√≠ticas de reinicializa√ß√£o robustas
    tee /etc/systemd/system/$NOME_SERVICO > /dev/null <<EOF
[Unit]
Description=Proxy SSH DragonX (Porta $PORTA)
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=$INSTALL_DIR
ExecStart=$INSTALL_DIR/$BIN_NAME -port :$PORTA
Restart=always
RestartSec=5
StartLimitIntervalSec=0

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable $NOME_SERVICO > /dev/null 2>&1
}

# Fun√ß√£o para iniciar um proxy em uma nova porta
iniciar_porta() {
    clear
    echo -e "\E[44;1;37m        INICIAR/ADICIONAR PORTA PROXY        \E[0m"
    echo ""
    echo -ne "\033[1;32mDigite a porta para o novo proxy (1-65535): \033[0m"
    read PORTA

    # Valida√ß√£o da porta
    while ! [[ $PORTA =~ ^[0-9]+$ ]] || (( PORTA < 1 || PORTA > 65535 )); do
        echo -e "\n\033[1;31m‚ö†Ô∏è Porta inv√°lida! Digite um n√∫mero entre 1 e 65535.\033[0m"
        echo -ne "\033[1;32mDigite a porta para o novo proxy: \033[0m"
        read PORTA
    done

    # Adiciona a porta na lista de gerenciamento se ela n√£o existir
    if ! grep -q "^$PORTA$" "$PORTS_FILE" 2>/dev/null; then
        echo $PORTA >> "$PORTS_FILE"
    fi

    echo -e "\n\033[1;33mConfigurando e iniciando o servi√ßo para a porta $PORTA...\033[0m"
    atualizar_servico $PORTA
    systemctl start "${SERVICE_PREFIX}_${PORTA}.service"
    echo -e "\n\033[1;32m‚úÖ Proxy DragonX iniciado na porta $PORTA!\033[0m"
    sleep 3
}

# Fun√ß√£o para parar um proxy de uma porta espec√≠fica
parar_porta() {
    clear
    echo -e "\E[44;1;37m              PARAR PORTA PROXY              \E[0m"
    echo ""
    echo -ne "\033[1;32mDigite a porta que deseja parar: \033[0m"
    read PORTA
    local NOME_SERVICO="${SERVICE_PREFIX}_${PORTA}.service"

    echo -e "\n\033[1;33mParando o servi√ßo da porta $PORTA...\033[0m"
    systemctl stop "$NOME_SERVICO"
    echo -e "\n\033[1;32müõë Proxy DragonX parado na porta $PORTA.\033[0m"
    sleep 3
}

# Fun√ß√£o para reiniciar um proxy de uma porta espec√≠fica
reiniciar_porta() {
    clear
    echo -e "\E[44;1;37m            REINICIAR PORTA PROXY            \E[0m"
    echo ""
    echo -ne "\033[1;32mDigite a porta que deseja reiniciar: \033[0m"
    read PORTA
    
    echo -e "\n\033[1;33mAtualizando e reiniciando o servi√ßo para a porta $PORTA...\033[0m"
    atualizar_servico $PORTA
    systemctl restart "${SERVICE_PREFIX}_${PORTA}.service"
    echo -e "\n\033[1;32müîÑ Proxy DragonX reiniciado na porta $PORTA!\033[0m"
    sleep 3
}

# Fun√ß√£o para remover completamente o DragonX
desinstalar_dragonx() {
    clear
    echo -e "\E[44;1;37m            DESINSTALAR DRAGONX            \E[0m"
    echo ""
    echo -e "\033[1;31mATEN√á√ÉO! Isso ir√° parar todos os proxies e remover todos os arquivos.\033[0m"
    echo -ne "\033[1;33mTem certeza que deseja continuar? [s/N]: \033[0m"
    read confirm
    if [[ "$confirm" != "s" && "$confirm" != "S" ]]; then
        echo -e "\n\033[1;32mDesinstala√ß√£o cancelada.\033[0m"
        sleep 2
        return
    fi
    
    echo -e "\n\033[1;33m‚ùå Removendo o DragonX...\033[0m"
    if [ -f "$PORTS_FILE" ]; then
        while read -r PORTA; do
            systemctl stop "${SERVICE_PREFIX}_${PORTA}.service"
            systemctl disable "${SERVICE_PREFIX}_${PORTA}.service"
            rm -f "/etc/systemd/system/${SERVICE_PREFIX}_${PORTA}.service"
        done < "$PORTS_FILE"
        rm -f "$PORTS_FILE"
    fi
    systemctl daemon-reload
    rm -rf "$INSTALL_DIR"
    rm -f /usr/local/bin/dragonx
    echo -e "\n\033[1;32m‚úÖ DragonX removido com sucesso!\033[0m"
    proxyd
}


# --- MENU PRINCIPAL ---
menu() {
    clear
    echo -e "\E[44;1;37m        PROXY DRAGONX   By: @alfalemos       \E[0m"
    echo ""
    echo -e "\033[1;33mSTATUS DAS PORTAS:\033[0m"
    if [ -f "$PORTS_FILE" ] && [ -s "$PORTS_FILE" ]; then
        while read -r PORTA; do
            local NOME_SERVICO="${SERVICE_PREFIX}_${PORTA}.service"
            if systemctl is-active --quiet "$NOME_SERVICO"; then
                echo -e "  \033[1;37m- Porta \033[1;32m$PORTA\033[1;37m (\033[1;32müü¢ Ativa\033[1;37m)"
            else
                echo -e "  \033[1;37m- Porta \033[1;31m$PORTA\033[1;37m (\033[1;31müî¥ Inativa\033[1;37m)"
            fi
        done < "$PORTS_FILE"
    else
        echo -e "  \033[1;31mNenhuma porta configurada.\033[0m"
    fi
    echo ""
    echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m‚Ä¢ \033[1;33mINICIAR PROXY (Adicionar Porta)\033[0m"
    echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m‚Ä¢ \033[1;33mPARAR PROXY (Por Porta)\033[0m"
    echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;37m‚Ä¢ \033[1;33mREINICIAR PROXY (Por Porta)\033[0m"
    echo -e "\033[1;31m[\033[1;36m4\033[1;31m] \033[1;37m‚Ä¢ \033[1;32mINSTALAR / ATUALIZAR\033[0m"
    echo -e "\033[1;31m[\033[1;36m5\033[1;31m] \033[1;37m‚Ä¢ \033[1;31mDESINSTALAR TUDO\033[0m"
    echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m‚Ä¢ \033[1;33mSAIR\033[0m"
    echo ""
    echo -ne "\033[1;32mO QUE DESEJA FAZER \033[1;33m?\033[1;37m "
    read opcao

    case $opcao in
        1) iniciar_porta ;;
        2) parar_porta ;;
        3) reiniciar_porta ;;
        4) instalar_ou_atualizar_dragonx ;;
        5) desinstalar_dragonx ;;
        0) clear; conexao ;;
        *) echo -e "\033[1;31mOp√ß√£o inv√°lida!\033[0m"; sleep 1 ;;
    esac
}

# --- LOOP DE EXECU√á√ÉO ---

# Verifica se o script est√° rodando como root
if [[ $EUID -ne 0 ]]; then
   echo -e "\033[1;31mEste script precisa ser executado como root (use sudo).\033[0m"
   proxyd
fi

# Garante que os diret√≥rios base existam antes de qualquer outra coisa
garantir_diretorios

# Verifica se a instala√ß√£o est√° completa antes de mostrar o menu
if ! verificar_instalacao; then
    clear
    echo -e "\033[1;31mParece que o DragonX n√£o est√° instalado corretamente.\033[0m"
    echo -e "\033[1;33mOs arquivos principais n√£o foram encontrados em $INSTALL_DIR\033[0m"
    echo -ne "\033[1;32mDeseja instalar agora? [S/n]: \033[0m"
    read -r install_confirm
    if [[ "$install_confirm" != "n" && "$install_confirm" != "N" ]]; then
        instalar_ou_atualizar_dragonx
    else
        echo -e "\033[1;31mInstala√ß√£o cancelada. O gerenciador n√£o pode continuar.\033[0m"
        proxyd
    fi
fi

# Loop principal do menu
while true; do
    menu
done